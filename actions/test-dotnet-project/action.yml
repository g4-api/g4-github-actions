name: 'dotnet-unit-test'
description: 'Run unit tests for a .NET project'

inputs:
  build_version:
    description: 'Build version'
    required: false
    default: '0.0.0.0'

  project_name:
    description: 'Name of the project'
    required: true

  project_type:
    description: 'Type of the project file (e.g., csproj or sln)'
    required: true

  filter:
    description: 'The filter to apply to the test run (e.g., TestCategory=Unit)'
    required: false
    default: ''
  
  test_settings:
    description: 'The path to the test settings file'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Unit Tests and Code Coverage
      env:
        artifactStagingDirectory: ${{ github.workspace }}/artifact_staging
      shell: pwsh
      run: |
        $projectFile = (Get-ChildItem -Path . -Filter "${{ inputs.project_name }}.${{ inputs.project_type }}" -Recurse).FullName
        $filterOption = if (![string]::IsNullOrWhiteSpace("${{ inputs.filter }}")) { "\"--filter ${{ inputs.filter }}"\" } else { "" }
        $settingsOption = if (![string]::IsNullOrWhiteSpace("${{ inputs.test_settings }}")) { "--settings ${{ inputs.test_settings }}" } else { "" }
        
        dotnet test $projectFile `
          -l:"trx;LogFileName=${{ env.artifactStagingDirectory }}/TestOutput.${{ inputs.project_name }}.${{ inputs.build_version }}.xml" `
          --collect:"Xplat Code Coverage" `
          $filterOption $settingsOption

    - name: Publish Test Results
      env:
        artifactStagingDirectory: ${{ github.workspace }}/artifact_staging
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        check_name: Unit Tests Results
        files: |
          ${{ env.artifactStagingDirectory }}/TestOutput.${{ inputs.project_name }}.${{ inputs.build_version }}.xml

    - name: Upload Unit Tests Results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: ${{ env.artifactStagingDirectory }}/TestOutput.${{ inputs.project_name }}.${{ inputs.build_version }}.xml

    - name: Copy Coverage File to Artifact Staging Directory
      env:
        artifactStagingDirectory: ${{ github.workspace }}/artifact_staging
      shell: pwsh
      run: |
        # Get the most recently modified 'coverage.cobertura.xml' file from the './TestResults' directory and its subdirectories
        $coverageFile = Get-ChildItem `
            -Path '.' `
            -Recurse -Filter 'coverage.cobertura.xml' `
            -File | Sort-Object -Property LastWriteTime -Descending | Select-Object -First 1 -ExpandProperty FullName

        # Define the new file name and destination path
        $newFileName = 'coverage.cobertura.${{ inputs.project_name }}.${{ inputs.build_version }}.xml'
        $destinationPath = Join-Path -Path ${{ env.artifactStagingDirectory }} -ChildPath $newFileName

        # Ensure the destination directory exists
        if (-not (Test-Path -Path ${{ env.artifactStagingDirectory }})) {
            New-Item -ItemType Directory -Path ${{ env.artifactStagingDirectory }}
        }

        # Copy the most recently modified 'coverage.cobertura.xml' file to the artifact staging directory with the new file name
        Copy-Item -Path $coverageFile -Destination $destinationPath

    - name: Upload Code Coverage Results
      env:
        artifactStagingDirectory: ${{ github.workspace }}/artifact_staging
      uses: actions/upload-artifact@v4
      with:
        name: test-coverage
        path: ${{ env.artifactStagingDirectory }}/coverage.cobertura.${{ inputs.project_name }}.${{ inputs.build_version }}.xml

    - name: New Code Coverage Summary
      id: new-coverage-file
      shell: pwsh
      run: |
        $xmlSource        = "${{ env.artifactStagingDirectory }}/coverage.cobertura.${{ inputs.project_name }}.${{ inputs.build_version }}.xml"
        $outputFile       = "${{ env.artifactStagingDirectory }}/coverage.cobertura.${{ inputs.project_name }}.${{ inputs.build_version }}.md"
        $showBadges       = $true
        $showPackages     = $true
        $showClassSummary = $false
        $showClassDetails = $false

        # Determine if the source is a URL or a file path
        if ($xmlSource -match "^http(s)?://") {
            # Load XML from URL
            $xml = [xml](Invoke-WebRequest -Uri $xmlSource).Content
        } else {
            # Load XML from file
            [xml]$xml = Get-Content -Path $xmlSource
        }

        # Extract coverage rates
        $lineCoverage = [math]::Round($xml.coverage.'line-rate', 2) * 100
        $branchCoverage = [math]::Round($xml.coverage.'branch-rate', 2) * 100

        # Start building the markdown content
        $markdown = @"
        # Unit Tests Code Coverage Report
        "@

        if ($showBadges) {
            $markdown += @"


        ![Line Coverage](https://img.shields.io/badge/Line%20Coverage-$lineCoverage%25-success?style=flat) ![Branch Coverage](https://img.shields.io/badge/Branch%20Coverage-$branchCoverage%25-success?style=flat)

        "@
        }

        $markdown += @"

        ## Overview

        - **Lines Covered**: $($xml.coverage.'lines-covered')
        - **Valid Lines**: $($xml.coverage.'lines-valid')
        - **Branches Covered**: $($xml.coverage.'branches-covered')
        - **Valid Branches**: $($xml.coverage.'branches-valid')

        "@

        if ($showPackages) {
            $markdown += @"

        ## Packages

        "@

            foreach ($package in $xml.coverage.packages.package) {
                $packageName = $package.name
                $packageLineRate = [math]::Round($package.'line-rate', 2) * 100
                $packageBranchRate = [math]::Round($package.'branch-rate', 2) * 100
                $packageComplexity = $package.complexity

                $markdown += @"

        ### Package: $packageName

        - **Line Coverage Rate**: $packageLineRate%
        - **Branch Coverage Rate**: $packageBranchRate%
        - **Complexity**: $packageComplexity

        "@

                if ($showClassSummary) {
                    $markdown += @"

        #### Classes Summary

        | Class Name                            | Filename            | Line Coverage Rate | Branch Coverage Rate | Complexity |
        |---------------------------------------|---------------------|--------------------|----------------------|------------|

        "@

                    foreach ($class in $package.classes.class) {
                        $className = $class.name
                        $classFilename = $class.filename
                        $classLineRate = [math]::Round($class.'line-rate', 2) * 100
                        $classBranchRate = [math]::Round($class.'branch-rate', 2) * 100
                        $classComplexity = $class.complexity

                        $markdown += @"
        | $className | $classFilename | $classLineRate% | $classBranchRate% | $classComplexity |

        "@
                    }
                }

                if ($showClassDetails) {
                    $markdown += "`n#### Class Details`n"

                    foreach ($class in $package.classes.class) {
                        $className = $class.name
                        $classFilename = $class.filename
                        $classLineRate = [math]::Round($class.'line-rate', 2) * 100
                        $classBranchRate = [math]::Round($class.'branch-rate', 2) * 100
                        $classComplexity = $class.complexity

                        $markdown += @"

        ##### $className

        - **Filename**: `$classFilename`
        - **Line Coverage Rate**: $classLineRate%
        - **Branch Coverage Rate**: $classBranchRate%
        - **Complexity**: $classComplexity

        ###### Lines

        | Line Number | Hits | Branch |
        |-------------|------|--------|

        "@

                        foreach ($line in $class.lines.line) {
                            $lineNumber = $line.number
                            $hits = $line.hits
                            $branch = $line.branch

                            $markdown += @"
        | $lineNumber | $hits | $branch |

        "@
                        }
                    }
                }
            }
        }

        # Write the markdown content to the output file
        $markdown | Out-File -FilePath $outputFile -Encoding utf8

    - name: Upload Code Coverage Summary
      uses: actions/upload-artifact@v4
      with:
        name: unit-tests-coverage-summary
        path: ${{ env.artifactStagingDirectory }}/coverage.cobertura.${{ inputs.project_name }}.${{ inputs.build_version }}.md

    - name: Collect Job Summary
      working-directory: ${{ env.artifactStagingDirectory }}  
      shell: pwsh
      run: |
        # Read the content of the coverage report file
        $content = Get-Content -Path "${{ env.artifactStagingDirectory }}/coverage.cobertura.${{ inputs.project_name }}.${{ inputs.build_version }}.md"

        # Append the content to the GitHub Actions job summary to display it in the workflow run details
        $content | Add-Content -Path $env:GITHUB_STEP_SUMMARY -Encoding utf8